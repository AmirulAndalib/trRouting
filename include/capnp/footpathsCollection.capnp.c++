// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: footpathsCollection.capnp

#include "footpathsCollection.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<60> b_cccc9e1975ca1692 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146,  22, 202, 117,  25, 158, 204, 204,
     26,   0,   0,   0,   1,   0,   0,   0,
     54,  63,  54, 141, 128, 213, 188, 220,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,  67, 111, 108, 108, 101,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 111, 111, 116, 112,  97,
    116, 104, 115,  67, 111, 108, 108, 101,
     99, 116, 105, 111, 110,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    169,  56,  83, 218,  45, 254, 117, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
     82,  97, 110, 103, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    156, 138, 122,   5, 152, 224, 145, 215,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cccc9e1975ca1692 = b_cccc9e1975ca1692.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cccc9e1975ca1692[] = {
  &s_8f75fe2dda5338a9,
  &s_d791e098057a8a9c,
};
static const uint16_t m_cccc9e1975ca1692[] = {1, 0};
static const uint16_t i_cccc9e1975ca1692[] = {0, 1};
const ::capnp::_::RawSchema s_cccc9e1975ca1692 = {
  0xcccc9e1975ca1692, b_cccc9e1975ca1692.words, 60, d_cccc9e1975ca1692, m_cccc9e1975ca1692,
  2, 2, i_cccc9e1975ca1692, nullptr, nullptr, { &s_cccc9e1975ca1692, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_8f75fe2dda5338a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169,  56,  83, 218,  45, 254, 117, 143,
     26,   0,   0,   0,   1,   0,   2,   0,
     54,  63,  54, 141, 128, 213, 188, 220,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,  67, 111, 108, 108, 101,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 111, 111, 116, 112,  97,
    116, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 111, 112,  49,  73, 100, 120,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 112,  50,  73, 100, 120,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 118, 101, 108,  84, 105,
    109, 101,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f75fe2dda5338a9 = b_8f75fe2dda5338a9.words;
#if !CAPNP_LITE
static const uint16_t m_8f75fe2dda5338a9[] = {0, 1, 2};
static const uint16_t i_8f75fe2dda5338a9[] = {0, 1, 2};
const ::capnp::_::RawSchema s_8f75fe2dda5338a9 = {
  0x8f75fe2dda5338a9, b_8f75fe2dda5338a9.words, 67, nullptr, m_8f75fe2dda5338a9,
  0, 3, i_8f75fe2dda5338a9, nullptr, nullptr, { &s_8f75fe2dda5338a9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_d791e098057a8a9c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    156, 138, 122,   5, 152, 224, 145, 215,
     26,   0,   0,   0,   1,   0,   1,   0,
     54,  63,  54, 141, 128, 213, 188, 220,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,  67, 111, 108, 108, 101,  99, 116,
    105, 111, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 111, 111, 116, 112,  97,
    116, 104,  82,  97, 110, 103, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,  83, 116,  97, 114, 116,  73, 100,
    120,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 111, 116, 112,  97, 116, 104,
    115,  69, 110, 100,  73, 100, 120,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d791e098057a8a9c = b_d791e098057a8a9c.words;
#if !CAPNP_LITE
static const uint16_t m_d791e098057a8a9c[] = {1, 0};
static const uint16_t i_d791e098057a8a9c[] = {0, 1};
const ::capnp::_::RawSchema s_d791e098057a8a9c = {
  0xd791e098057a8a9c, b_d791e098057a8a9c.words, 52, nullptr, m_d791e098057a8a9c,
  0, 2, i_d791e098057a8a9c, nullptr, nullptr, { &s_d791e098057a8a9c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace footpathsCollection {

// FootpathsCollection
constexpr uint16_t FootpathsCollection::_capnpPrivate::dataWordSize;
constexpr uint16_t FootpathsCollection::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FootpathsCollection::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FootpathsCollection::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Footpath
constexpr uint16_t Footpath::_capnpPrivate::dataWordSize;
constexpr uint16_t Footpath::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Footpath::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Footpath::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FootpathRange
constexpr uint16_t FootpathRange::_capnpPrivate::dataWordSize;
constexpr uint16_t FootpathRange::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FootpathRange::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FootpathRange::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

