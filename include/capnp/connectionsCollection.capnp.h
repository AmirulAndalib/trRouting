// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: connectionsCollection.capnp

#ifndef CAPNP_INCLUDED_8c317b06a598b048_
#define CAPNP_INCLUDED_8c317b06a598b048_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d9b161d73db1f975);
CAPNP_DECLARE_SCHEMA(e18cc97a6b614e9c);

}  // namespace schemas
}  // namespace capnp

namespace connectionsCollection {

struct ConnectionsCollection {
  ConnectionsCollection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9b161d73db1f975, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Connection {
  Connection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e18cc97a6b614e9c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ConnectionsCollection::Reader {
public:
  typedef ConnectionsCollection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasForwardConnections() const;
  inline  ::capnp::List< ::connectionsCollection::Connection>::Reader getForwardConnections() const;

  inline bool hasReverseConnections() const;
  inline  ::capnp::List< ::connectionsCollection::Connection>::Reader getReverseConnections() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConnectionsCollection::Builder {
public:
  typedef ConnectionsCollection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasForwardConnections();
  inline  ::capnp::List< ::connectionsCollection::Connection>::Builder getForwardConnections();
  inline void setForwardConnections( ::capnp::List< ::connectionsCollection::Connection>::Reader value);
  inline  ::capnp::List< ::connectionsCollection::Connection>::Builder initForwardConnections(unsigned int size);
  inline void adoptForwardConnections(::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>> disownForwardConnections();

  inline bool hasReverseConnections();
  inline  ::capnp::List< ::connectionsCollection::Connection>::Builder getReverseConnections();
  inline void setReverseConnections( ::capnp::List< ::connectionsCollection::Connection>::Reader value);
  inline  ::capnp::List< ::connectionsCollection::Connection>::Builder initReverseConnections(unsigned int size);
  inline void adoptReverseConnections(::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>> disownReverseConnections();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConnectionsCollection::Pipeline {
public:
  typedef ConnectionsCollection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Connection::Reader {
public:
  typedef Connection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getStopDepIdx() const;

  inline  ::int32_t getStopArrIdx() const;

  inline  ::int32_t getTimeDep() const;

  inline  ::int32_t getTimeArr() const;

  inline  ::int32_t getTripIdx() const;

  inline  ::int8_t getCanBoard() const;

  inline  ::int8_t getCanUnboard() const;

  inline  ::int32_t getSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Connection::Builder {
public:
  typedef Connection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getStopDepIdx();
  inline void setStopDepIdx( ::int32_t value);

  inline  ::int32_t getStopArrIdx();
  inline void setStopArrIdx( ::int32_t value);

  inline  ::int32_t getTimeDep();
  inline void setTimeDep( ::int32_t value);

  inline  ::int32_t getTimeArr();
  inline void setTimeArr( ::int32_t value);

  inline  ::int32_t getTripIdx();
  inline void setTripIdx( ::int32_t value);

  inline  ::int8_t getCanBoard();
  inline void setCanBoard( ::int8_t value);

  inline  ::int8_t getCanUnboard();
  inline void setCanUnboard( ::int8_t value);

  inline  ::int32_t getSequence();
  inline void setSequence( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Connection::Pipeline {
public:
  typedef Connection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ConnectionsCollection::Reader::hasForwardConnections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ConnectionsCollection::Builder::hasForwardConnections() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Reader ConnectionsCollection::Reader::getForwardConnections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Builder ConnectionsCollection::Builder::getForwardConnections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ConnectionsCollection::Builder::setForwardConnections( ::capnp::List< ::connectionsCollection::Connection>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Builder ConnectionsCollection::Builder::initForwardConnections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ConnectionsCollection::Builder::adoptForwardConnections(
    ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>> ConnectionsCollection::Builder::disownForwardConnections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ConnectionsCollection::Reader::hasReverseConnections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ConnectionsCollection::Builder::hasReverseConnections() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Reader ConnectionsCollection::Reader::getReverseConnections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Builder ConnectionsCollection::Builder::getReverseConnections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ConnectionsCollection::Builder::setReverseConnections( ::capnp::List< ::connectionsCollection::Connection>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::connectionsCollection::Connection>::Builder ConnectionsCollection::Builder::initReverseConnections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ConnectionsCollection::Builder::adoptReverseConnections(
    ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::connectionsCollection::Connection>> ConnectionsCollection::Builder::disownReverseConnections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::connectionsCollection::Connection>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t Connection::Reader::getStopDepIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getStopDepIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setStopDepIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Connection::Reader::getStopArrIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getStopArrIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setStopArrIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Connection::Reader::getTimeDep() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getTimeDep() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setTimeDep( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Connection::Reader::getTimeArr() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getTimeArr() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setTimeArr( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Connection::Reader::getTripIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getTripIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setTripIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Connection::Reader::getCanBoard() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Connection::Builder::getCanBoard() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setCanBoard( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Connection::Reader::getCanUnboard() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Connection::Builder::getCanUnboard() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setCanUnboard( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Connection::Reader::getSequence() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Connection::Builder::getSequence() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Connection::Builder::setSequence( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_8c317b06a598b048_
