// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: footpathsCollection.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cccc9e1975ca1692);
CAPNP_DECLARE_SCHEMA(8f75fe2dda5338a9);
CAPNP_DECLARE_SCHEMA(d791e098057a8a9c);

}  // namespace schemas
}  // namespace capnp

namespace footpathsCollection {

struct FootpathsCollection {
  FootpathsCollection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cccc9e1975ca1692, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Footpath {
  Footpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f75fe2dda5338a9, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FootpathRange {
  FootpathRange() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d791e098057a8a9c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FootpathsCollection::Reader {
public:
  typedef FootpathsCollection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFootpaths() const;
  inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Reader getFootpaths() const;

  inline bool hasFootpathRanges() const;
  inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Reader getFootpathRanges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FootpathsCollection::Builder {
public:
  typedef FootpathsCollection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFootpaths();
  inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Builder getFootpaths();
  inline void setFootpaths( ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Builder initFootpaths(unsigned int size);
  inline void adoptFootpaths(::capnp::Orphan< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>> disownFootpaths();

  inline bool hasFootpathRanges();
  inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Builder getFootpathRanges();
  inline void setFootpathRanges( ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Builder initFootpathRanges(unsigned int size);
  inline void adoptFootpathRanges(::capnp::Orphan< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>> disownFootpathRanges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FootpathsCollection::Pipeline {
public:
  typedef FootpathsCollection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Footpath::Reader {
public:
  typedef Footpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getNode1Idx() const;

  inline  ::int32_t getNode2Idx() const;

  inline  ::int32_t getTravelTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Footpath::Builder {
public:
  typedef Footpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getNode1Idx();
  inline void setNode1Idx( ::int32_t value);

  inline  ::int32_t getNode2Idx();
  inline void setNode2Idx( ::int32_t value);

  inline  ::int32_t getTravelTime();
  inline void setTravelTime( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Footpath::Pipeline {
public:
  typedef Footpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FootpathRange::Reader {
public:
  typedef FootpathRange Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getFootpathsStartIdx() const;

  inline  ::int32_t getFootpathsEndIdx() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FootpathRange::Builder {
public:
  typedef FootpathRange Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getFootpathsStartIdx();
  inline void setFootpathsStartIdx( ::int32_t value);

  inline  ::int32_t getFootpathsEndIdx();
  inline void setFootpathsEndIdx( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FootpathRange::Pipeline {
public:
  typedef FootpathRange Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool FootpathsCollection::Reader::hasFootpaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FootpathsCollection::Builder::hasFootpaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Reader FootpathsCollection::Reader::getFootpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Builder FootpathsCollection::Builder::getFootpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FootpathsCollection::Builder::setFootpaths( ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>::Builder FootpathsCollection::Builder::initFootpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FootpathsCollection::Builder::adoptFootpaths(
    ::capnp::Orphan< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>> FootpathsCollection::Builder::disownFootpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::Footpath,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FootpathsCollection::Reader::hasFootpathRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FootpathsCollection::Builder::hasFootpathRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Reader FootpathsCollection::Reader::getFootpathRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Builder FootpathsCollection::Builder::getFootpathRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FootpathsCollection::Builder::setFootpathRanges( ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>::Builder FootpathsCollection::Builder::initFootpathRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FootpathsCollection::Builder::adoptFootpathRanges(
    ::capnp::Orphan< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>> FootpathsCollection::Builder::disownFootpathRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::footpathsCollection::FootpathRange,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t Footpath::Reader::getNode1Idx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Footpath::Builder::getNode1Idx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Footpath::Builder::setNode1Idx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Footpath::Reader::getNode2Idx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Footpath::Builder::getNode2Idx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Footpath::Builder::setNode2Idx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Footpath::Reader::getTravelTime() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Footpath::Builder::getTravelTime() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Footpath::Builder::setTravelTime( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FootpathRange::Reader::getFootpathsStartIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FootpathRange::Builder::getFootpathsStartIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FootpathRange::Builder::setFootpathsStartIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FootpathRange::Reader::getFootpathsEndIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FootpathRange::Builder::getFootpathsEndIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FootpathRange::Builder::setFootpathsEndIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace

